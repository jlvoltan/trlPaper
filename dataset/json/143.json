{
    "id": 143,
    "titulo": "arquitetura de um sistema de múltiplas aeronaves remotamente pilotadas para operações em defesa",
    "autor": "erick m. moreira, nicolas souza de melo miranda de oliveira, fábio luiz jr",
    "url": "http://www.ebrevistas.eb.mil.br/CT/article/view/8655",
    "tipo_documento": "Artigo de Revista",
    "rotulo": 2,
    "resumo": "O uso de múltiplos veículos autônomos em operações de Defesa tem aumentado rapidamente. Seu emprego como uma extensão das equipes de segurança pública garante maior flexibilidade, alcance e consciência situacional durante as operações. No entanto, quando nos afastamos do desenvolvimento das capacidades técnicas em direção às aplicações práticas, percebemos que as demandas operacionais nem sempre se encontram com as capacidades técnicas disponíveis. Assim, visando reduzir esse hiato, apresentamos uma arquitetura robótica para um sistema de múltiplas aeronaves remotamente pilotadas. Ela traduz as demandas operacionais em táticas e ações para cada membro do sistema de maneira estruturada e reutilizável. Para validá-la, realizamos um estudo de caso onde múltiplas aeronaves devem perseguir um líder e, no evento de baixa energética, realizar a substituição por aeronaves reservas. A arquitetura se mostrou extremamente flexível e adequada ao estudo realizado.",
    "texto": " 1. Introdução A sociedade moderna vem, desde a Revolução Industrial, empregando sistemas automatizados para melhorar sua vida e a sua eficiência produtiva. Nos dias atuais, robôs têm substituído humanos na realização de tarefas enfadonhas, repetitivas ou perigosas, poupando vidas e garantindo um mundo melhor para se viver. As pesquisas em inteligência artificial têm permitido a criação de máquinas que podem, cada vez mais, interagir com humanos, com o mundo que os cerca e com outras máquinas. Com isso, na relação humano-máquina, a espécie humana tem deixado de desempenhar o papel de operador e passado ao papel de cooperador, ou seja, aquele que tem a função de estar junto do robô, não para controlá-lo, mas para coordená-lo, sugestionando-o e corrigindo-o, tal como uma criança que precisa de orientação durante o aprendizado. Em operações de Defesa não é diferente. Sistemas robóticos melhoram a eficiência das tropas coletando informações, fornecendo proteção e aumentando a capacidade combativa individual e coletiva. Em especial, veículos não tripulados (terrestres, aéreos, aquáticos e subaquáticos), atingem locais antes considerados inalcançáveis, onde o corpo humano sofre com o excesso de pressão, com a falta de oxigênio e com a presença de substâncias nocivas. Nesses contextos, as demandas têm sido tantas, tão exigentes e tão diferentes, que desenhar máquinas que exerçam todos esses papéis tende à impossibilidade. A solução tem sido criar robôs mais simples, heterogêneos, limitados, que cooperem uns com os outros em um sistema de aeronaves remotamente pilotadas (SARP ou RPAS, do inglês Remotely Piloted Aircraft System) para exceder essas limitações, demonstrando unicidade de vontade (objetivo comum) e praticando o coletivismo, a partir do autoconhecimento e da comunicação com seus vizinhos. Em um SARP, cada elemento é chamado aeronave remotamente pilotada (ARP). Um dos grandes desafios da atualidade nas áreas de Robótica e Inteligência Artificial é a coordenação de múltiplos robôs. Dentre as inúmeras aplicações para um SARP que pode beneficiar a sociedade, pode-se citar a agricultura de precisão [1-5], o monitoramento remoto ecológico e meteorológico [6-7] e a inspeção de linhas de transmissão de energia, dutos e obras de arte de engenharia civil [8-11]. Outra grande oportunidade de emprego, civil e militar, que aumenta o desejo por essa tecnologia e motiva essa pesquisa, são as atividades de busca, resgate, identificação e acompanhamento de alvos [12-17] e de sensoriamento remoto de áreas suspeitas de vazamento (ou ataque) químico, biológico e nuclear [18-19]. Essas são algumas das aplicações em Defesa que motivam o estudo acerca da cooperação entre agentes robóticos em um SARP. Quando humanos cooperam, cada indivíduo toma ciência do objetivo coletivo e executa os planos traçados, por si próprio ou por outrem, para cumprir tarefas parciais que se somam até a conclusão do objetivo final. Quando robôs cooperam não é diferente: seus planos precisam ser desenhados antecipadamente e, cientes de suas capacidades e limitações, cada um deles deverá cumprir sua tarefa. Portanto, antes de extrair conclusões, é preciso refletir sobre o nível de cognição, coordenação visual e coordenação motora necessárias para o cumprimento de tais planos. Um ser humano consegue facilmente desviar de obstáculos enquanto se desloca para um objetivo qualquer, consegue evitar a colisão com seus colegas de empreitada e, durante a execução da tarefa, sabe se manter próximo do grupo de trabalho para ouvir as orientações dos demais integrantes. O desenvolvimento dessas capacidades primitivas para os elementos do SARP é o que motiva essa pesquisa. A fim de estabelecer uma arquitetura comum a todos os projetos que permeiam o grupo de pesquisa do Laboratório de Robótica e Inteligência Artificial do Instituto Militar de Engenharia, propomos uma arquitetura robótica para SARP. Ela descreve os componentes lógicos e físicos de um agente pertencente ao SARP. Sua essência foi inspirada pelas premissas apresentadas em DARPA [20] tendo em seu topo as demandas operacionais para um SARP e, na base, o hardware necessário para uma ARP funcionar. Seu propósito é traduzir demandas operacionais humanas em tarefas para cada aeronave, lidando com problemas coletivos e individuais como coordenar a execução de tarefas, realizar voo coordenado, estabelecer rede de comunicação, seguir uma lista de waypoints e detectar, mapear e evitar a colisão com obstáculos. Além disso, a arquitetura prevê em seu cerne (inteligência do robô) a interação de diversos submódulos corresponsáveis pelo funcionamento da ARP com o modelo belief-desireintention (BDI) para agentes inteligentes [21]. Tal modelo preconiza a existência de crenças que guiam as decisões do agente, enquanto ele assume papéis e realiza ações a fim de cumprir os objetivos estabelecidos por cada tarefa. A arquitetura foi validada com estudos de caso. O restante do artigo está organizado do seguinte modo: a Seção 2 faz um resumo de alguns trabalhos relacionados; a Seção 3 descreve a arquitetura proposta; a validação da arquitetura por meio de um estudo de caso é apresentada na Seção 4; e a Seção 5 apresenta as conclusões. 2. Trabalhos relacionados Gomes et al. [22] apresentaram uma arquitetura baseada em modelos, dos mais simples para os mais complexos, representando o SARP como um sistema de sistemas. Sua abordagem compreende desde as atividades desempenhadas pela torre de controle (Centro C2) até os subsistemas necessários para o guiamento do veículo. Alguns dos sistemas listados são: mapeamento global, controle manual da aeronave, meteorologia, comunicações, desvio de obstáculos, diagnóstico e manutenção, gerenciamento de voo, estimação da posição, energia e planejamento de trajetória. De forma muito similar, Brooks et al. [23] também descreveram uma arquitetura para veículo aéreo baseada em sistemas e subsistemas. Seu trabalho acrescenta a noção de hierarquia de controle inteligente, tendo no topo da hierarquia o nível decisor (centro C2) que determina os objetivos, seguido pelos níveis de controle de missão, de coordenação e de execução que, de acordo com os autores, varia gradativamente dos pontos de vista mais humanos no topo para assuntos mais técnicos na base. Marconato et al. [24] produziram um modelo arquitetural chamado LARISSA. Ele também é um modelo que representa um sistema complexo criado da composição de sistemas mais simples. Seu enfoque foi mais voltado para os subsistemas de hardware e abstrações de software de supervisão do sistema operacional. Em 2017, a agência de projetos de pesquisa de Defesa DARPA (Defense Advanced Research Project Agency), publicou a chamada pública OFFSET, do inglês OFFensive Swarm Enabled Tactics, para a promoção e desenvolvimento de táticas militares que incorporam sistemas de enxame robótico (SRS, do inglês Swarm of Robotic Systems) [20]. O objetivo é o aumento da capacidade combativa das tropas por meio da integração de enxames não-tripulados às fileiras de pequenas frações. O documento deixa clara a intenção de criar táticas ofensivas com tropas heterogêneas (militares e veículos não-tripulados) e deixa indicado também que tais táticas devem ser possíveis através da execução de primitivas de enxame (swarm primitives). O documento dita que as capacidades de um sistema desse tipo dependem dos vetores: comunicação, autonomia, percepção, interação humano-enxame e logística. Além disso, ele ressalta que muitas tecnologias desenvolvidas na área são órfãs de emprego tático e, por isso, propõe que os estudos sejam promovidos na seguinte sequência: (i) definição das necessidades de combate, (ii) planejamento das táticas de emprego para atender à necessidade demandada, (iii) seleção ou definição das primitivas necessárias para o enxame executar as táticas e (iv) seleção ou desenvolvimento dos algoritmos que compõem as primitivas selecionadas. Peres, Rosa e Choren [25] apresentaram um modelo conceitual para condução de missões com SRS. Seu modelo foi concebido para implementação em uma arquitetura multiagente, onde ações descentralizadas são executadas baseadas em planos e a partir das crenças programadas em cada agente de software. A figura 1 ilustra os principais aspectos do modelo. Nela, um operador C2 pode demandar missões, que transcorrerão em um dado ambiente, e transmitir tarefas para os robôs. Essas missões possuem objetivos e definem papéis a serem desempenhados. Para cumprir os objetivos, são traçados planos, cujas ações serão executadas por aqueles robôs, a partir de suas crenças. Por fim, essas ações alteram ou percebem o ambiente, permitindo a observação dos resultados e o registro de novos eventos no sistema. 3. Arquitetura proposta Problemas complexos e que envolvem múltiplos agentes requerem soluções robustas. Assim, antes de tratar do problema enunciado, é preciso preparar o ambiente para receber a solução concebida. A literatura possui um vácuo sobre o assunto, tendo sido um dos tópicos incluídos em programas de pesquisa relacionados de alto nível como DARPA [20]. Neste artigo, propomos uma arquitetura orientada a agentes móveis para um robô integrante de enxame robótico, que deverá cumprir missões através da coordenação e do emprego tático de seus elementos. A partir do modelo conceitual da figura 1 e das revisões de literatura, conjecturamos que uma missão com múltiplos robôs deve possuir a estrutura ilustrada pela figura 2 é descrita a seguir: (i) Um controlador de missão responsável por tomar as decisões. Poderão existir outros controladores para fins de resiliência do processo, mantendo apenas um deles selecionado por meio de eleição; (ii) Múltiplas plataformas robóticas, conforme necessário para cada missão. Cada robô deve ser capaz de processar dois grupos de mensagens diferentes: (a) Mensagens de inteligência de enxame provenientes do controlador de missão ou de outros robôs; (b)Mensagens de inteligência do robô provenientes dos módulos internos controladores do robô. Cada um dos elementos arquiteturais citados são complexos por si só. A seguir, eles serão descritos com maiores detalhes. 3.1 Controlador de missão Em missões com SARP, é comum a presença de uma ou mais estações de controle de solo (GCS). A GCS tem por atribuição monitorar e controlar a mecânica de voo da aeronave. Normalmente, ela fica junto ao decisor da tarefa, que poderá atuar nas aeronaves quando lhe for conveniente. O modelo que propomos sugere a adição do controlador de missão à GCS. A função do controlador de missão é monitorar e coordenar a execução da missão atribuída ao grupo de robôs. Além disso, quando for o caso, os resultados parciais coletados ou gerados serão entregues a ele, permitindo a tomada de decisões preliminares com informações parciais. Outra atribuição do controlador de missão é coordenar a execução de recursos externos ao sistema. É muito comum que os recursos computacionais necessários para executar alguns algoritmos não estejam disponíveis no robô. Nestes casos, podemos recorrer a métodos de computação assistida, resolvendo os algoritmos em ambiente externo e devolvendo-os ao robô. Por fim, o controlador de missão pode conter ainda uma parte da solução de inteligência de enxame. Diversos algoritmos precisam ser executados com o conhecimento global, isto é, com o máximo possível de informações sobre as ARPs que pertencem ao sistema, fazendo do controlador de missão um ambiente favorável para executar tais algoritmos, pois ele e a GCS possuem dados monitorados das aeronaves e da missão. 3.2 Arquitetura do robô A plataforma do robô compreende um largo espectro de funcionalidades, desde o hardware disponível e seus drivers, passando pelos algoritmos que lhe confere capacidades, até a inteligência que rege a plataforma. A partir de agora, usaremos o termo emprego tático, que pode gerar dúvidas interpretativas. Aqui, denotamos o sentido mais amplo da tática que é um método ou uma habilidade de obter bons resultados em uma determinada situação. Essa denominação visa distinguir os algoritmos técnicos dos algoritmos operacionais. O primeiro grupo de algoritmos resolve problemas como visão computacional, planejamento de trajetória, e localização e mapeamento simultâneos (SLAM); enquanto o segundo grupo de algoritmos busca solução para problemas práticos como patrulhar uma área, acompanhar um alvo e executar busca visual. A figura 3 apresenta a organização da hierarquia da arquitetura do robô, que é composta pelas camadas: plataforma, algoritmos, primitivas e inteligência do robô. A seguir, apresentaremos a descrição da funcionalidade de cada uma delas. (i) Plataforma Robótica: Esse grupo de recursos é composto dos itens de hardware da plataforma e.g., sensores (GPS, câmera, ultrassom, telêmetro, LIDAR, microfone), atuadores (motores, alto-falante), subsistemas complexos (rádio RF, INS - Inertial Navigation System) e outros payloads diversos que podem ser acoplados à plataforma; (ii) Algoritmos do Robô: À categoria de algoritmos pertencem técnicas clássicas como o SLAM, fusão de sensores para navegação, odometria visual, desvio de obstáculos e detecção visual de objetos, assim como outras que podem ser criadas, como os algoritmos de pontaria de armas embarcadas e de detecção de sinal de rádio frequência. Nesta categoria, os recursos definem capacidades do robô que, geralmente, não possuem emprego tático; (iii) Primitivas do Robô: São consideradas primitivas os recursos que permitem uma ação com emprego tático. Elas usualmente farão uso de um ou mais algoritmos e técnicas conhecidas pelo robô. São exemplos de primitivas: realizar disparo em alvo por arma embarcada, acompanhar alvo detectado visualmente, realizar patrulhamento, transmitir comunicado em massa, executar busca visual ou de sinal e monitorar região de interesse para inteligência (RIPI) ou área de objetivo de interesse (AOI); iv) Inteligência do Robô: Diversos módulos independentes geram eventos, que devem ser levados em consideração nas tomadas de decisão da entidade robótica. A inteligência do robô é responsável por concentrar e ponderar esses eventos, para decidir como melhor agir em prol da missão e conservação própria. A quantidade de módulos envolvidos requer a apresentação desta camada em uma seção separada. 3.3 Inteligência do robô As decisões tomadas pelo robô, sua lógica de comportamento e a gestão de subsistemas independentes são atividades categorizadas como inteligência do robô. De acordo com o modelo conceitual, o agente é uma entidade de software que possui crenças, objetivos e papéis. A partir desses conceitos, ele executa ações que podem modificar o ambiente e gerar eventos para o SRS. No contexto desta proposta, ainda soma-se à consciência individual outro grande subsistema, a inteligência de enxame, que possui formulação e subcategorias próprias. Abaixo, foram listados alguns dos principais sistemas necessários para o funcionamento de um robô, conforme ilustrado na figura 4. (i) Gerente de Rede: É o subsistema independente responsável pela gestão de mensagens e manutenção da conectividade; (ii) Gerente de Energia: É o subsistema independente responsável por monitorar a capacidade energética, ou seja, seu consumo e geração (quando for o caso) e gerar análises (eventos) sobre tempo restante de voo, influência na potência de transmissão, capacidade de acionamento de payload e demais fatores que possam afetar o funcionamento do sistema; (iii) Gerente de Diagnósticos: É o subsistema independente responsável por monitorar o funcionamento dos subsistemas, criando um registro de atividades executadas na plataforma. Ele, sempre que possível, gerará eventos relacionados a possíveis panes para o software decisor; (iv) Gerente de Tarefas: É o subsistema independente responsável por controlar a execução das tarefas da plataforma e coordená-la com a execução de outros elementos; (v) Inteligência de Enxame: É o subsistema independente com a incumbência de prover comportamento coletivo ao enxame. Devido a sua complexidade, ela será abordada em sua própria seção. 3.4 Inteligência de enxame Este subsistema independente é responsável pelo comportamento de grupo. Nele, será observada a delegação de missão ao enxame, a criação de planos táticos para sua execução a partir das primitivas disponíveis e a execução das tarefas de maneira coordenada. A figura 5 apresenta a organização da hierarquia da inteligência de enxame, que é composta pelas camadas: missão do enxame, táticas de enxame, primitivas de enxame e algoritmos de enxame. A seguir, apresentaremos a descrição da funcionalidade de cada uma delas. (i) Missão do Enxame: Esse nível de cognição tenta capturar a intenção humana, i.e., as demandas descritas como objetivos operacionais em alto nível para o grupo. Verbos como vigiar, reconhecer e defender deverão ser empregados para transmitir a intenção do decisor ao enxame. O uso de uma gramática bem definida de interação humanoenxame beneficiaria sobremaneira o funcionamento de uma equipe mista, pois definiria claramente uma interface reutilizável de comandos para controlar o robô; (ii) Táticas de Enxame: São programas onde a intenção da missão deve ser traduzida em planos, designando elementos ou grupos do enxame, juntos ou não com humanos, para conduzir ações (primitivas) que busquem a consecução da missão dada. Essa é a camada de raciocínio onde o grupo deve avaliar a situação e gerar em consenso o plano de ação que será utilizado; (iii) Primitivas de Enxame: Determinam habilidades com propósito de emprego tático bem definido como, por exemplo, identificar pontos de entrada em um edifício, definir um perímetro, mapear uma estrutura ou região em 2D/3D, identificar alvos por imagem, comunicar-se através de rede ad hoc, localizar fontes de sinais e realizar base de fogos. Nesta etapa, serão mapeados os atores necessários para a execução de cada ação que compõe a primitiva; (iv) Algoritmos de Enxame: Compõem as capacidades coletivas que podem ser executadas, tais como estabelecer consenso entre si, realizar tarefas coordenadamente, voar e manobrar em grupo, estabelecer enlaces ponto a ponto, transmitir dados através de múltiplos saltos e determinar a posição de um sinal por triangulação. Esta categoria de recursos define o conjunto de habilidades do grupo. Na figura 6 podemos observar diversos exemplos para todas as camadas que descrevemos anteriormente. No nível de missão de enxame temos tarefas típicas de Defesa, como realizar segurança de flanco e de retaguarda, reconhecer cabeça de ponte e vias de acesso, adquirir alvos e vigiar área; e outras tarefas mais modernas como estabelecer uma rede de comando e controle, e apoiar a execução de operações psicológicas. Essas missões nem sempre poderão ser completamente realizadas por falta de capacidade técnica do robô, como o reconhecimento de pontes, de rios e a defesa de fato do flanco e da retaguarda. Embora elas não possam ser executadas como uma equipe em solo as executaria, ao menos essas tarefas servirão de apoio e coleta às demais equipes humanas envolvidas. No nível de táticas do enxame temos duas ilustrações que mostram como os robôs foram distribuídos na tarefa para conquistar o objetivo desejado. A ilustração de tática da esquerda mostra que as ARPs se posicionarão na frente do objetivo a fim de criar uma distração, enquanto uma equipe humana faz a abordagem pelo flanco direito e pela retaguarda. A ilustração de tática da direita mostra o padrão de busca a ser executado na área definida pela missão. A camada de tática do enxame vai sempre variar de acordo com o tipo de missão e com a criatividade do decisor da operação. As primitivas de enxame apresentam ações táticas reusáveis como construir imagem 3D a partir de múltiplas imagens, observar a execução de fogos e identificar pontos de entrada em um edifício. Algumas dessas ações táticas podem ser consideradas pequenas missões. No entanto, elas foram classificadas como primitivas por serem comumente utilizadas em operações. A camada de algoritmos de enxame, por sua vez, possui as técnicas necessárias para o funcionamento dos robôs em grupo. Recursos como estabelecer consenso, executar tarefas coordenadamente e voar em grupo sem colisão capacitam o SARP a operar em missões coletivas corretamente. As camadas Primitivas do robô e Algoritmos do robô da arquitetura do robô possuem forte paralelo com as respectivas camadas da arquitetura de inteligência do enxame, exceto pelo contexto de funcionamento que é individual. A camada Hardware do robô é a camada que representa os componentes embarcados na plataforma robótica, que determinam sua capacidade de interagir com o ambiente, tais como GPS, alto-falante e microfone. E, por fim, há ainda a camada de Inteligência do robô, que merece destaque pois é responsável por coordenar todas as atividades, inclusive a integração com a Inteligência de Enxame. Nela, encontramos todos os gestores de áreas de importância da ARP como rede, energia, diagnósticos internos, além da inteligência de enxame. 4. Estudo de caso Como se observou até o presente momento, o conceito arquitetural apresentado é extremamente amplo. Por isso, este estudo não ambicionou a criação de uma biblioteca que contemple todas as possibilidades listadas. A seguir, apresentamos um estudo de caso onde testamos uma fração da capacidade deste modelo, a fim de verificar sua viabilidade técnica. 4.1 Implementação do algoritmo PSO para controle de múltiplas ARPs executando tarefa de perseguição continuada Um grupo de múltiplas plataformas robóticas atuando em conjunto pode empregar seus elementos de maneira independente ou conjunta. Por exemplo, pode-se enviar uma ARP para realizar um reconhecimento por imagens de uma dada localidade ou despachar um grupo para realizar uma reconstrução 2D/3D a partir de múltiplas imagens. Quando atuam em conjunto, independente da tarefa a ser desempenhada, é imperiosa a capacidade de se mover em grupo, realizando um voo coordenado. Por isso, desenvolvemos o trabalho relatado em Oliveira, Moreira e Rosa[26]. Neste estudo de caso, não descreveremos todo o desenvolvimento do trabalho: nosso foco será apresentar o seu enquadramento no modelo arquitetural proposto, destacando a interação entre as camadas e módulos do modelo e do trabalho. Complementando o intuito de realizar o voo coordenado, adicionamos as seguintes restrições: (i) o voo deve ser realizado no modelo líderseguidor, sendo um líder e n seguidores; (ii) a posição dos seguidores não deve ser prefixada, ou seja, não há uma posição exata para cada seguidor ocupar em relação ao líder; e (iii) durante a tarefa, ao menos um robô deverá ser substituído. A figura 7 ilustra o cenário vislumbrado para o trabalho. O estudo foi realizado em simulador. Utilizamos uma versão modificada do algoritmo Particle Swarm Optimization (PSO) [27] para determinar as posições das ARPs seguidoras, evitar colisões e seguir o líder, aplicando a técnica de campos potenciais [28]; o software DroneKit [29] como biblioteca de envio de comandos para as aeronaves; e programas de desenvolvimento próprio para monitorar e controlar toda a operação. No nível de missão do enxame, o operador humano do SARP, decisor da operação, determina que seja realizado um voo coordenado do tipo líder-seguidor e passa o plano de voo a ser realizado pelo líder. A tática da missão é organizada pelo controlador de missão, que determina quem será a ARP líder, as ARPs seguidoras e as ARPs que permanecerão em reserva. Após a atribuição das funções, o controlador de missão carregará para cada papel as informações necessárias para o cumprimento da tarefa, tais como a rota do líder, o número de aeronaves e os parâmetros de execução do PSO. Quando finalizados os preparativos, o controlador inicia a missão. Embora no futuro o voo coordenado possa ser considerado um algoritmo de enxame, como pode ser observado nafigura 6, nesse momento de desenvolvimento o consideramos como a missão a ser realizada. Portanto, não selecionaremos primitivas ou algoritmos de enxame. Note que, neste caso, a inteligência de enxame pode ser executada junto ao controlador de missão ou a partir de uma ARP qualquer da missão, contanto que os cálculos sejam feitos de maneira centralizada como relatado no artigo [26]. Dotada do planejamento de enxame, a inteligência do robô determinará seu objetivo, seus planos e, a partir das suas crenças, executará o voo que foi determinado para si. Novamente, por ser uma tarefa de pouca complexidade, não será necessário utilizar primitivas do robô, apenas os algoritmos relacionados à navegação, tais como o controlador de voo, o desviador de obstáculos e o fusor de sensores. Durante a execução do voo coordenado, o gerente de energia monitora o estado da bateria e mantém estimativas de capacidade de voo e da necessidade energética para o retorno a salvo da ARP. No contexto dessa tarefa, forçamos o esgotamento precoce de uma aeronave, para que houvesse o emprego de uma ARP em reserva. Assim que é sinalizada a necessidade de substituição, a inteligência do robô comunica ao controlador da missão o problema, usando o gerente de rede. Em consequência, nesta implementação, a ARP é substituída por outra caso haja disponibilidade, caso contrário ela tem o retorno ordenado. Na figura 8 podemos ver ilustrações da tarefa sendo executada no simulador. A simulação completa pode ser vista em https://youtu.be/rwKOMDeT24I. 5. Conclusão Como se pôde observar, o modelo arquitetural proposto tem foco na tradução de demandas operacionais em ações e planos exequíveis pelos robôs. Outra característica notável é a amplitude do modelo. Apesar de possuir uma estrutura vertical em camadas, elas não se restringem em usar e servir as camadas imediatamente inferior e superior, respectivamente. Como sugestão para o futuro desta arquitetura, seria interessante a implementação de uma biblioteca capaz de integrar os inúmeros módulos em tempo real, seja embarcado no robô ou em um ambiente remoto. Seria ainda uma melhoria notável, se o algoritmo de cálculo das posições do voo coordenado pudesse ser distribuído, fazendo uso de dispositivos de rede. "
}